<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

    <name>Recognising C Code Constructs in Assembly lab</name>
    <author>Thalita Vergilio</author>
    <description>
      # Introduction
      In this lab you will dive deep into the world of 32-bit x86 assembly language to gain a comprehensive understanding of how C code constructs are represented in assembly. This knowledge is not only essential for understanding how software functions at a low level but also for identifying and analyzing malicious code and vulnerabilities. The lab will cover crucial theoretical concepts, including branching, conditionals, loops, switch statements, arrays, strings, and structs in assembly language.

      Throughout this lab, you will learn how to recognize and map C code constructs into their assembly language counterparts. You will engage in hands-on activities such as disassembling C programs using tools like objdump, and analyzing the resulting assembly code to identify key elements like loops, conditionals, and switch statements. You will also solve practical challenges within the lab, such as finding specific flags hidden within assembly code by following hints and performing dynamic analysis. By the end of this lab, you will have a solid grasp of these reverse engineering and malware analysis fundamentals, equipped with the skills to dissect and understand low-level code structures and uncover elements within them.

      In your home directory you will find some binaries that you need to reverse engineer in order to determine the password that the program expects. Once you have found the password, run the program and enter the password to receive the flag.
    </description>
    <lab_sheet_url>https://docs.google.com/document/d/1_qU8ORKDuGdSN8GNH7znAc0e8x64pC4IPHvVJR7_JWM/edit?usp=sharing</lab_sheet_url>

    <type>ctf-lab</type>
    <type>lab-sheet</type>
    <difficulty>intermediate</difficulty>

    <CyBOK KA="MAT" topic="Malware Analysis">
        <keyword>analysis techniques</keyword>
        <keyword>analysis environments</keyword>
        <keyword>STATIC ANALYSIS</keyword>
    </CyBOK>

    <video>
        <title>Recognising C Constructs in Assembly</title>
        <by>Thalita Vergilio</by>
        <url>https://youtu.be/8b6JokfEFEo</url>
        <type>lecture-prerecorded</type>
        <CyBOK KA="MAT" topic="Malware Analysis">
            <keyword>analysis techniques</keyword>
        </CyBOK>
    </video>

    <system>
        <system_name>metactf</system_name>
        <base distro="Debian 12" type="desktop" name="KDE"/>

        <utility module_path=".*/reversing_tools"/>

        <utility module_path=".*/parameterised_accounts">
            <input into="accounts" into_datastore="account">
                <generator type="account">
                    <input into="username">
                        <generator type="random_sanitised_word">
                            <input into="wordlist">
                                <value>mythical_creatures</value>
                            </input>
                        </generator>
                    </input>
                    <input into="password">
                        <value>tiaspbiqe2r</value>
                    </input>
                    <input into="super_user">
                        <value>false</value>
                    </input>
                </generator>
            </input>
        </utility>


        <utility module_path=".*/kde_minimal">
            <input into="autologin_user">
                <datastore access="0" access_json="['username']">account</datastore>
            </input>
            <input into="accounts">
                <datastore>account</datastore>
            </input>
            <input into="autostart_konsole">
                <value>true</value>
            </input>
        </utility>
        <utility module_path=".*/handy_cli_tools"/>
        <utility module_path=".*/hash_tools"/>

        <utility module_path=".*/metactf">
            <input into="challenge_list">
                <generator type="metactf_challenge">
                    <input into="challenge_path">
                        <value>src_csp/Ch3.6-3.7/Ch3_06_LoopMulti</value>
                    </input>
                </generator>
                <generator type="metactf_challenge">
                    <input into="challenge_path">
                        <value>src_malware/Ch01-08/Ch06CAsm_SwitchTable</value>
                    </input>
                </generator>
            </input>
            <input into="account">
                <datastore>account</datastore>
            </input>
        </utility>

        <network type="private_network" range="dhcp"/>
    <input into_datastore="spoiler_admin_pass">
      <generator type="strong_password_generator"/>
    </input>
    <build type="cleanup">
      <input into="root_password">
        <datastore>spoiler_admin_pass</datastore>
      </input>
    </build>
    </system>

</scenario>
